//test procedural texture generate

struct VS_OUTPUT{
float4 p:POSITION,p0:TEXCOORD0;
};

float4x4 mat;

texture texNoise;
sampler sampNoise=sampler_state{
Texture=<texNoise>;
MipFilter=NONE;
MinFilter=POINT;
MagFilter=POINT;
AddressU=WRAP;
AddressV=WRAP;
};

texture tex;
sampler samp=sampler_state{
Texture=<tex>;
MipFilter=NONE;
MinFilter=LINEAR;
MagFilter=LINEAR;
AddressU=CLAMP;
AddressV=CLAMP;
};
sampler sampWrapU=sampler_state{
Texture=<tex>;
MipFilter=NONE;
MinFilter=LINEAR;
MagFilter=LINEAR;
AddressU=WRAP;
AddressV=CLAMP;
};
sampler sampM=sampler_state{
Texture=<tex>;
MipFilter=LINEAR;
MinFilter=LINEAR;
MagFilter=LINEAR;
AddressU=CLAMP;
AddressV=CLAMP;
};
sampler sampBorder=sampler_state{
Texture=<tex>;
MipFilter=NONE;
MinFilter=LINEAR;
MagFilter=LINEAR;
AddressU=BORDER;
AddressV=BORDER;
BorderColor=0;
};

texture tex2;
sampler samp2=sampler_state{
Texture=<tex2>;
MipFilter=NONE;
MinFilter=LINEAR;
MagFilter=LINEAR;
AddressU=CLAMP;
AddressV=CLAMP;
};

float4 pixelSize;

////////custom parameter

int _iParam[4];
float4 _fParam[4];

////////

/*
VS_OUTPUT vs_func(float4 p:POSITION){
VS_OUTPUT d;
d.p=mul(p,mat);
d.p0=p;
return d;
}
*/

//out: (-1,-1)->(1,1) depth:near=0 far=1 (?)

//render to texture
//TODO:
VS_OUTPUT vs_func_rtt(float4 p:POSITION,float2 t0:TEXCOORD0){
VS_OUTPUT d;
d.p=float4(t0.x*2-1,1-t0.y*2,0.5,1);
//d.p=float4(t0.x,t0.y,0.5,1);
d.p0=p;
return d;
}

//IT WORKS!!!

float simplexnoise(float3 p){
float n=0.0f;
float3 i=floor(p+(p.x+p.y+p.z)/3.0f);
float3 x0=p-(i-(i.x+i.y+i.z)/6.0f);
float3 i1,i2;
//TODO:change
    if(x0.x>=x0.y) {
      if(x0.y>=x0.z)
        { i1=float3(1,0,0); i2=float3(1,1,0); } // X Y Z order
        else if(x0.x>=x0.z) { i1=float3(1,0,0); i2=float3(1,0,1); } // X Z Y order
        else { i1=float3(0,0,1); i2=float3(1,0,1); } // Z X Y order
      }
    else { // x0<y0
      if(x0.y<x0.z) { i1=float3(0,0,1); i2=float3(0,1,1); } // Z Y X order
      else if(x0.x<x0.z) { i1=float3(0,1,0); i2=float3(0,1,1); } // Y Z X order
      else { i1=float3(0,1,0); i2=float3(1,1,0); } // Y X Z order
    }
float3 x1=x0-i1+1/6.0f;
float3 x2=x0-i2+1/3.0f;
float3 x3=x0-0.5f;
//i=64.0f*frac(i/64.0f);
i/=64.0f;
//
float t=0.6f-dot(x0,x0);
if(t>0){
 t*=t;
 n+=t*t*dot(tex2D(sampNoise,float2(tex2D(sampNoise,i.xy).x,i.z)).xyz-0.5f,x0);
}
t=0.6f-dot(x1,x1);
if(t>0){
 t*=t;
 i1/=64.0f;
 n+=t*t*dot(tex2D(sampNoise,float2(tex2D(sampNoise,i.xy+i1.xy).x,i.z+i1.z)).xyz-0.5f,x1);
}
t=0.6f-dot(x2,x2);
if(t>0){
 t*=t;
 i2/=64.0f;
 n+=t*t*dot(tex2D(sampNoise,float2(tex2D(sampNoise,i.xy+i2.xy).x,i.z+i2.z)).xyz-0.5f,x2);
}
t=0.6f-dot(x3,x3);
if(t>0){
 i+=1/64.0f;
 t*=t;
 n+=t*t*dot(tex2D(sampNoise,float2(tex2D(sampNoise,i.xy).x,i.z)).xyz-0.5f,x3);
}
//xxx
return n*64.0f;
}

float4 ps_func_simplexnoise(VS_OUTPUT d,uniform int nType):COLOR0{
float a=0,b=_fParam[0].x,c=_fParam[0].y;
int i;

for(i=0;i<_iParam[0];i++){
 if(nType==0) a+=simplexnoise(d.p0.xyz*c+i)*b;
 else if(nType==1) a+=abs(simplexnoise(d.p0.xyz*c+i))*b;
 b*=_fParam[0].z;c*=_fParam[0].w;
}

return float4(a,a,a,1);
}

float4 ps_func(VS_OUTPUT d):COLOR0{

float a=0,b=1,c=1;
int i;

#if 1

//normal --> rock
for(i=0;i<6;i++){
 a+=simplexnoise(d.p0.xyz*c+i)*b;
 b*=0.86;c*=1.85;
}
a=smoothstep(-1.0,1.0,a);
return lerp(float4(44,36,35,255)/255.0f,float4(211,120,93,255)/255.0f,a);

#else

//abs --> marble
for(i=0;i<4;i++){
 a+=abs(simplexnoise(d.p0.xyz*c+i))*b;
 b*=0.6;c*=2.5;
}
a=pow(a/1.5,0.3);

//add some noise
float3 n=tex2D(sampNoise,float2(tex2D(sampNoise,d.p0.xy*16.18033).x,d.p0.z*16.18033)).xyz-0.5f;
//return float4(a+n,1);
a=a+n.x/8.0f;
return float4(a,a,a,1);

#endif

}

/*
technique test{
pass{VertexShader=compile vs_2_0 vs_func();
PixelShader=compile ps_3_0 ps_func();}
}
*/

technique test_rtt{
pass{VertexShader=compile vs_2_0 vs_func_rtt();
PixelShader=compile ps_3_0 ps_func();}
}

technique gen_simplexnoise{
pass{VertexShader=compile vs_2_0 vs_func_rtt();
PixelShader=compile ps_3_0 ps_func_simplexnoise(0);}
}

technique gen_simplexnoise_abs{
pass{VertexShader=compile vs_2_0 vs_func_rtt();
PixelShader=compile ps_3_0 ps_func_simplexnoise(1);}
}

////////generate mipmap

float4 mipmap4_func(float2 t:TEXCOORD0):COLOR0{
return (tex2D(samp,float4(t.x,t.y,0,0))
+tex2D(samp,float4(t.x+pixelSize.x,t.y,0,0))
+tex2D(samp,float4(t.x,t.y+pixelSize.y,0,0))
+tex2D(samp,float4(t.x+pixelSize.x,t.y+pixelSize.y,0,0)))/4.0f;
}

technique mipmap4{
pass{PixelShader=compile ps_2_0 mipmap4_func();}
}

////////////////////////////////////////
//
// process texture
//
////////////////////////////////////////

float4 grayscale_func(float2 t:TEXCOORD0):COLOR0{
float f=dot(tex2D(samp,t),float4(0.222,0.707,0.071,0));
return float4(f,f,f,1);
}

technique grayscale{
pass{PixelShader=compile ps_2_0 grayscale_func();}
}

float4 normal_func(float2 t:TEXCOORD0):COLOR0{
float4 clr;
///
float4 f=float4(
tex2D(samp,float2(t.x-pixelSize.x,t.y-pixelSize.y)).x,
tex2D(samp,float2(t.x-pixelSize.x,t.y+pixelSize.y)).x,
tex2D(samp,float2(t.x+pixelSize.x,t.y-pixelSize.y)).x,
tex2D(samp,float2(t.x+pixelSize.x,t.y+pixelSize.y)).x);
/// (-) ???
clr.x=-(f.z+f.w+tex2D(samp,float2(t.x+pixelSize.x,t.y)).x*2.0f
-f.x-f.y-tex2D(samp,float2(t.x-pixelSize.x,t.y)).x*2.0f);
clr.y=-(f.y+f.w+tex2D(samp,float2(t.x,t.y+pixelSize.y))*2.0f
-f.x-f.z-tex2D(samp,float2(t.x,t.y-pixelSize.y)).x*2.0f);
///custom amount
clr.xy*=_fParam[0].xy;
///
clr.z=sqrt(1.0f-clr.x*clr.x-clr.y*clr.y);
clr.xyz=(clr.xyz+1.0f)*0.5f;
clr.w=_fParam[0].z+_fParam[0].w*tex2D(samp,t).x;
return clr;
}

technique normal_map{
pass{PixelShader=compile ps_2_0 normal_func();}
}

float4 expand4_func(float2 t:TEXCOORD0):COLOR0{
float4 c,clr=tex2D(samp,t);
c=tex2D(samp,float2(t.x,t.y-pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x,t.y+pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y));
clr=clr.w<0.5f?c:clr;
return clr;
}

technique expand4{
pass{PixelShader=compile ps_2_0 expand4_func();}
}

float4 expand8_func(float2 t:TEXCOORD0):COLOR0{
float4 c,clr=tex2D(samp,t);
c=tex2D(samp,float2(t.x,t.y-pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x,t.y+pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y-pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y+pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y-pixelSize.y));
clr=clr.w<0.5f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y+pixelSize.y));
clr=clr.w<0.5f?c:clr;
return clr;
}

technique expand8{
pass{PixelShader=compile ps_2_0 expand8_func();}
}

////////

float4 expand4_r32f_func(float2 t:TEXCOORD0):COLOR0{
float4 c,clr=tex2D(samp,t);
c=tex2D(samp,float2(t.x,t.y-pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x,t.y+pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y));
clr=clr.x<-1000.0f?c:clr;
return clr;
}

technique expand4_r32f{
pass{PixelShader=compile ps_2_0 expand4_r32f_func();}
}

float4 expand8_r32f_func(float2 t:TEXCOORD0):COLOR0{
float4 c,clr=tex2D(samp,t);
c=tex2D(samp,float2(t.x,t.y-pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x,t.y+pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y-pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x-pixelSize.x,t.y+pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y-pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
c=tex2D(samp,float2(t.x+pixelSize.x,t.y+pixelSize.y));
clr=clr.x<-1000.0f?c:clr;
return clr;
}

technique expand8_r32f{
pass{PixelShader=compile ps_2_0 expand8_r32f_func();}
}

////////

float4 ps_smoothstep(float2 t:TEXCOORD0):COLOR0{
float a=_fParam[0].z+smoothstep(_fParam[0].x,_fParam[0].y,tex2D(samp,t).x)*_fParam[0].w;
return float4(a,a,a,1);
}

technique process_smoothstep{
pass{PixelShader=compile ps_2_0 ps_smoothstep();}
}

float4 ps_lerp(float2 t:TEXCOORD0):COLOR0{
return lerp(_fParam[0],_fParam[1],tex2D(samp,t).x);
}

technique process_lerp{
pass{PixelShader=compile ps_2_0 ps_lerp();}
}

float4 ps_lerp_ex(float2 t:TEXCOORD0):COLOR0{
	float4 clr=tex2D(samp,t);
	return lerp(clr,tex2D(samp2,t),min(clr.w*_fParam[0].x,_fParam[0].y));
}

technique process_lerp_ex{
pass{PixelShader=compile ps_2_0 ps_lerp_ex();}
}

float4 ps_linear(float2 t:TEXCOORD0):COLOR0{
return _fParam[0]+tex2D(samp,t)*_fParam[1];
}

technique process_linear{
pass{PixelShader=compile ps_2_0 ps_linear();}
}

float4 ps_convolve_h_symmetric4(float2 t:TEXCOORD0,uniform sampler s):COLOR0{
	return mul(_fParam[0],float4x4(tex2D(s,t)
	,tex2D(s,float2(t.x-pixelSize.x,t.y))+tex2D(s,float2(t.x+pixelSize.x,t.y))
	,tex2D(s,float2(t.x-pixelSize.x*2.0f,t.y))+tex2D(s,float2(t.x+pixelSize.x*2.0f,t.y))
	,tex2D(s,float2(t.x-pixelSize.x*3.0f,t.y))+tex2D(s,float2(t.x+pixelSize.x*3.0f,t.y))
	));
}

technique convolve_h_symmetric4{
pass{PixelShader=compile ps_2_0 ps_convolve_h_symmetric4(samp);}
}

technique convolve_h_symmetric4_border{
pass{PixelShader=compile ps_2_0 ps_convolve_h_symmetric4(sampBorder);}
}

float4 ps_convolve_v_symmetric4(float2 t:TEXCOORD0,uniform sampler s):COLOR0{
	return mul(_fParam[0],float4x4(tex2D(s,t)
	,tex2D(s,float2(t.x,t.y-pixelSize.y))+tex2D(s,float2(t.x,t.y+pixelSize.y))
	,tex2D(s,float2(t.x,t.y-pixelSize.y*2.0f))+tex2D(s,float2(t.x,t.y+pixelSize.y*2.0f))
	,tex2D(s,float2(t.x,t.y-pixelSize.y*3.0f))+tex2D(s,float2(t.x,t.y+pixelSize.y*3.0f))
	));
}

technique convolve_v_symmetric4{
pass{PixelShader=compile ps_2_0 ps_convolve_v_symmetric4(samp);}
}

technique convolve_v_symmetric4_border{
pass{PixelShader=compile ps_2_0 ps_convolve_v_symmetric4(sampBorder);}
}

float4 ps_convolve_directional_symmetric4(float2 t:TEXCOORD0,uniform sampler s):COLOR0{
	return mul(_fParam[0],float4x4(tex2D(s,t)
	,tex2D(s,t-_fParam[1].xy)+tex2D(s,t+_fParam[1].xy)
	,tex2D(s,t-_fParam[1].xy*2.0f)+tex2D(s,t+_fParam[1].xy*2.0f)
	,tex2D(s,t-_fParam[1].xy*3.0f)+tex2D(s,t+_fParam[1].xy*3.0f)
	));
}

technique convolve_directional_symmetric4{
pass{PixelShader=compile ps_2_0 ps_convolve_directional_symmetric4(samp);}
}

technique convolve_directional_symmetric4_border{
pass{PixelShader=compile ps_2_0 ps_convolve_directional_symmetric4(sampBorder);}
}

float4 ps_convolve_h_symmetric4_ex(float2 t:TEXCOORD0,uniform sampler s):COLOR0{
	float4 clr0=tex2D(s,t);
	float size=pixelSize.x*clr0.w;
	return float4(mul(_fParam[0],float4x4(clr0
	,tex2D(s,float2(t.x-size,t.y))+tex2D(s,float2(t.x+size,t.y))
	,tex2D(s,float2(t.x-size*2.0f,t.y))+tex2D(s,float2(t.x+size*2.0f,t.y))
	,tex2D(s,float2(t.x-size*3.0f,t.y))+tex2D(s,float2(t.x+size*3.0f,t.y))
	)).xyz,clr0.w);
}

technique convolve_h_symmetric4_ex{
pass{PixelShader=compile ps_2_0 ps_convolve_h_symmetric4_ex(samp);}
}

technique convolve_h_symmetric4_ex_border{
pass{PixelShader=compile ps_2_0 ps_convolve_h_symmetric4_ex(sampBorder);}
}

float4 ps_convolve_v_symmetric4_ex(float2 t:TEXCOORD0,uniform sampler s):COLOR0{
	float4 clr0=tex2D(s,t);
	float size=pixelSize.y*clr0.w;
	return float4(mul(_fParam[0],float4x4(clr0
	,tex2D(s,float2(t.x,t.y-size))+tex2D(s,float2(t.x,t.y+size))
	,tex2D(s,float2(t.x,t.y-size*2.0f))+tex2D(s,float2(t.x,t.y+size*2.0f))
	,tex2D(s,float2(t.x,t.y-size*3.0f))+tex2D(s,float2(t.x,t.y+size*3.0f))
	)).xyz,clr0.w);
}

technique convolve_v_symmetric4_ex{
pass{PixelShader=compile ps_2_0 ps_convolve_v_symmetric4_ex(samp);}
}

technique convolve_v_symmetric4_ex_border{
pass{PixelShader=compile ps_2_0 ps_convolve_v_symmetric4_ex(sampBorder);}
}

////////////////////////////////////////
//
// post effects
//
////////////////////////////////////////

float4 ps_to_luminance(float2 t:TEXCOORD0):COLOR0{
	//float f=exp((dot(tex2D(samp,t),float4(0.222,0.707,0.071,0))-1.0f)*_fParam[0].x);
	float f=log(dot(tex2D(samp,t),float4(0.222,0.707,0.071,0))+0.0001f);
	return float4(f,f,f,1);
}

technique fx_to_luminance{
pass{PixelShader=compile ps_2_0 ps_to_luminance();}
}

float4 ps_from_luminance_bias(float2 t:TEXCOORD0):COLOR0{
	//float f=log(tex2Dbias(sampM,float4(t.x,t.y,0,_fParam[0].w)).x)/_fParam[0].x+1.0f;
	float f=exp(tex2Dbias(sampM,float4(t.x,t.y,0,_fParam[0].w)).x);
	return float4(f,f,f,1);
}

technique fx_from_luminance_bias{
pass{PixelShader=compile ps_2_0 ps_from_luminance_bias();}
}

float4 simple_tonemapping_func(float2 t:TEXCOORD0):COLOR0{
	float3 clr=tex2D(samp,t).xyz;
	//float3 f=_fParam[0].x*tex2D(samp,t).xyz;
	float f=tex2D(samp2,t).x/_fParam[0].x+dot(clr,float3(0.222,0.707,0.071));
	return float4(clr/f*_fParam[0].y,1);
	//return float4(tex2D(samp,t).xyz-tex2D(samp2,t).x,1);
}

technique simple_tonemapping{
pass{PixelShader=compile ps_2_0 simple_tonemapping_func();}
}

float4 simple_brightpass_func(float2 t:TEXCOORD0):COLOR0{
	float3 clr=tex2D(samp,t).xyz;
	float f=max(dot(clr,float3(0.222,0.707,0.071))-tex2D(samp2,t).x-_fParam[0].y,0.0f);
	return float4(clr*f*_fParam[0].x,1);
}

technique simple_brightpass{
pass{PixelShader=compile ps_2_0 simple_brightpass_func();}
}

float4 normalized_brightpass_func(float2 t:TEXCOORD0):COLOR0{
	float3 clr=tex2D(samp,t).xyz;
	float average=tex2D(samp2,t).x+_fParam[0].y;
	float f=max((dot(clr,float3(0.222,0.707,0.071))-average)/(1.0f-average),0.0f);
	return float4(clr*f*_fParam[0].x,1);
}

technique normalized_brightpass{
pass{PixelShader=compile ps_2_0 normalized_brightpass_func();}
}

float4 simple_radial_blur5_func(float2 t:TEXCOORD0):COLOR0{
	float2 t1=t-0.5f;
	return (tex2D(samp,t)+tex2D(samp,t1*_fParam[0].x+0.5f)
	+tex2D(samp,t1*_fParam[0].y+0.5f)
	+tex2D(samp,t1*_fParam[0].z+0.5f)
	+tex2D(samp,t1*_fParam[0].w+0.5f))*0.2f;
}

technique simple_radial_blur5{
pass{PixelShader=compile ps_2_0 simple_radial_blur5_func();}
}

//0:fogcolor
//1:xy=depth of field coefficient : r=abs(x+y/depth) (blah blah blah)
//2:x=near y=far z=maxdensity
//3:xy=(distance correction coefficient)*zfar z=zfar
float4 ps_linear_with_fog(float2 t:TEXCOORD0,uniform bool bVolumeFog):COLOR0{
	float4 clr=tex2D(samp,t);
	float fogvalue=clr.w;
	//depth of fieldz
	float dof_value=abs(_fParam[1].x+_fParam[1].y/fogvalue);
	//
	if(bVolumeFog){
		float4 clr2=tex2D(samp2,t);
		fogvalue+=(clr2.y-clr2.x)*10.0f;
	}
	//distance correction (!!!! it works !!!!)
	fogvalue*=length(float3(t-0.5f,1.0f)*_fParam[3].xyz);
	//===
	fogvalue=smoothstep(_fParam[2].x,_fParam[2].y,fogvalue)*_fParam[2].z;
	//fogvalue=saturate((fogvalue-_fParam[2].x)/(_fParam[2].y-_fParam[2].x))*_fParam[2].z;
	return float4(lerp(clr,_fParam[0],fogvalue).xyz,dof_value);
}

float4 ps_depth_of_field_only(float2 t:TEXCOORD0):COLOR0{
	float4 clr=tex2D(samp,t);
	return float4(clr.xyz,abs(_fParam[1].x+_fParam[1].y/clr.w));
}

technique fx_depth_of_field_only{
pass{PixelShader=compile ps_2_0 ps_depth_of_field_only();}
}

technique fx_linear_with_fog{
pass{PixelShader=compile ps_2_0 ps_linear_with_fog(false);}
}

technique fx_linear_with_volume_fog{
pass{PixelShader=compile ps_2_0 ps_linear_with_fog(true);}
}

float4 ps_skydome(float2 t:TEXCOORD0):COLOR0{
	float3 v=normalize(_fParam[0].xyz+t.x*_fParam[1].xyz+t.y*_fParam[2].xyz);
	t.x=atan2(v.y,v.x)/6.28318531;
	t.y=1.0-asin(v.z)/1.57079633;
	return tex2D(sampWrapU,t);
}

technique fx_skydome{
pass{PixelShader=compile ps_2_0 ps_skydome();}
}
